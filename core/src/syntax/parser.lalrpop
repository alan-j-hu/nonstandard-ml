use crate::stringpool::StringToken;
use super::ast::{Case, Dec, Exp, Pat, Located};
use super::lexer::{Error, Token};
use bumpalo::{Bump, collections::Vec};
use lexgen_util::{LexerError, Loc};

grammar<'a>(bump: &'a Bump);

extern {
    type Location = Loc;
    type Error = LexerError<Error<'a>>;

    enum Token<'a> {
        "|" => Token::Bar,
        "=" => Token::Equal,
        "_" => Token::Underscore,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "=>" => Token::ThickArrow,
        Id => Token::Var(<&'a str>),
        IntegerLit => Token::IntegerLit(<i64>),
        StringLit => Token::StringLit(<StringToken>),
        "case" => Token::CaseKw,
        "end" => Token::EndKw,
        "fn" => Token::FnKw,
        "in" => Token::InKw,
        "let" => Token::LetKw,
        "of" => Token::OfKw,
        "val" => Token::ValKw,
    }
}

Loc<X>: Located<X> = {
    <l: @L> <x: X> <r: @R> => Located {
        span: (l, r),
        node: x,
    }
}

pub Program: Located<Dec<'a>> = {
   <Loc<Dec>>
}

Dec: Dec<'a> = {
    <dec1: Loc<Dec>> <dec2: Loc<SubDec>> =>
        Dec::Seq(bump.alloc(dec1), bump.alloc(dec2)),
    <SubDec>,
}

SubDec: Dec<'a> = {
    "val" <pat: Loc<Pat>> "=" <exp: Loc<Exp>> =>
        Dec::Val(bump.alloc(pat), bump.alloc(exp)),
}

Exp: Exp<'a> = {
    "let" <dec: Loc<Dec>> "in" <exp: Loc<Exp>> =>
        Exp::Let(bump.alloc(dec), bump.alloc(exp)),
    AppExp
}

AppExp: Exp<'a> = {
    <exp1: Loc<AppExp>> <exp2: Loc<AtomExp>> =>
        Exp::Apply(bump.alloc(exp1), bump.alloc(exp2)),
    AtomExp
}

AtomExp: Exp<'a> = {
    IntegerLit => Exp::Integer(<>),
    StringLit => Exp::String(<>),
    Id => Exp::Var(bump.alloc(<>)),
    "fn" <mut cases: Cases> "end" =>
        Exp::Lambda(bump.alloc_slice_fill_iter(cases.drain(..))),
    "case" <exp: Loc<Exp>> "of" <mut cases: Cases> "end" =>
        Exp::Case(bump.alloc(exp), bump.alloc_slice_fill_iter(cases.drain(..))),
    "(" <Exp> ")"
}

Pat: Pat<'a> = {
    "_" => Pat::Wild,
    Id => Pat::Var(bump.alloc(<>)),
    IntegerLit => Pat::Int(<>),
}

Pats: (Located<Pat<'a>>, Vec<'a, Located<Pat<'a>>>) = {
    <pat: Loc<Pat>> => (pat, Vec::new_in(bump)),
    <pr: Pats> <pat: Loc<Pat>> => {
        let (p, mut v) = pr;
        v.push(pat);
        (p, v)
    },
}

Cases: Vec<'a, Case<'a>> = {
    => Vec::new_in(bump),
    <case: Case> => {
        let mut v = Vec::new_in(bump);
        v.push(case);
        v
    },
    <mut v: Cases> "|" <case: Case> => {
        v.push(case);
        v
    },
}

Case: Case<'a> = {
    <pr: Pats> "=>" <exp: Loc<Exp>> => {
        let (pat, mut pats) = pr;
        Case {
            pat: bump.alloc(pat),
            pats: bump.alloc_slice_fill_iter(pats.drain(..)),
            rhs: exp
        }
    }
}
